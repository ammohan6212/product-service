name: CI Pipeline

on:
  push:
    branches:
      - dev
      - test
permissions:
  contents: read
  security-events: write


jobs:
  clone-tag-and-config:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_tag.outputs.version }}
      service_name: ${{ steps.set-vars.outputs.service_name }}
      docker_username: ${{ steps.set-vars.outputs.docker_username }}
      services: ${{ steps.set-vars.outputs.services }}
    steps:
      - name: Checkout the dev branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch all tags
        run: git fetch --tags

      - id: get_tag
        name: Get the latest tag
        run: |
          VERSION=$(git describe --tags $(git rev-list --tags --max-count=1))
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Print version for debug
        run: echo "Version is ${{ steps.get_tag.outputs.version }}"

      - name: Install jq
        run: sudo apt-get install -y jq

      - id: set-vars
        name: Read config.json and set outputs
        run: |
          CONFIG_PATH=config.json
          SERVICE_NAME=$(jq -r '.serviceName' "$CONFIG_PATH")
          DOCKER_USERNAME=$(jq -r '.docker_username' "$CONFIG_PATH")
          SERVICES=$(jq -c '.services' "$CONFIG_PATH")
          echo "service_name=$SERVICE_NAME" >> $GITHUB_OUTPUT
          echo "docker_username=$DOCKER_USERNAME" >> $GITHUB_OUTPUT
          echo "services=$SERVICES" >> $GITHUB_OUTPUT
      - name: Print all config values
        run: |
          echo "✅ Debug Output:"
          echo "Service Name: ${{ steps.set-vars.outputs.service_name }}"
          echo "Docker Username: ${{ steps.set-vars.outputs.docker_username }}"
          echo "Services: ${{ steps.set-vars.outputs.services }}"
          echo "version is ${{ steps.get_tag.outputs.version }} "


  install-dependencies:
    name: Install Dependencies
    runs-on: ubuntu-latest
    needs: clone-tag-and-config
    steps:
      - name: checkout code
        uses: actions/checkout@v4


      - name: install the dependencies here
        run: go mod tidy
    
      - name: Set up Snyk CLI
        uses: snyk/actions/setup@806182742461562b67788a64410098c9d9b96adb
        env:
          SNYK_TOKEN: d9141a36-1bc7-49bb-b541-bc2a1c31b3bf

      - name: Authenticate Snyk
        run: snyk auth d9141a36-1bc7-49bb-b541-bc2a1c31b3bf

      - name: scanning the dependencies
        run: snyk test --file=go.mod
        continue-on-error: true
    

    
  lint:
    name: Run Linter
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: install the dependencies
        run: |
          go mod tidy
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: ./...             # ✅ This is correct — do NOT put 'run ./...'
          install-mode: binary
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run hadolint
        uses: hadolint/hadolint-action@master
        with:
          dockerfile: ./Dockerfile
          format: sarif
          output-file: hadolint-results.sarif
          no-fail: true

      - name: Upload analysis results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: hadolint-results.sarif
          wait-for-processing: true

      - name: Run Super-Linter
        uses: github/super-linter@v6
        env:
          VALIDATE_ALL_CODEBASE: true
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true 

  # secret-detect:
  #   name: Secret Detection
  #   runs-on: ubuntu-latest
  #   needs: lint
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0 # Required for Gitleaks/TruffleHog to scan full history

  #     - name: Setup Python for detect-secrets
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.10'

  #     - name: Install detect-secrets
  #       run: pip install detect-secrets

  #     - name: Run detect-secrets
  #       run: |
  #         detect-secrets scan > .secrets.new.baseline

  #     - name: Run TruffleHog
  #       # Using a dedicated action is generally better for caching and maintenance
  #       uses: edplato/trufflehog-actions-scan@master  # Or a specific version like v1.0.0
  #       with:
  #         path: ./
  #         base: ${{ github.sha }} # Scan only changes from the current commit
  #         extra_args: --only-verified
  #       continue-on-error: true 

  #     - name: Run Gitleaks
  #       uses: gitleaks/gitleaks-action@v2
  #       with:
  #         args: "--verbose --redact"


  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: install the dependecies for python
        # This is a good practice if unit-tests run in a fresh runner or parallel to install-dependencies
        run: go mod tidy

      - name: Run Unit Tests
        # Assuming 'npm test' is defined in package.json
        run: echo "unit test happens here"
      
      - name: code coverage report 
        run: echo "code coverage happens here"


  sonar-scan:
    name: SonarQube Static Code Analysis
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
         java-version: '17'
         distribution: 'temurin'

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        continue-on-error: true 


  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: sonar-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install go dependencies (if not already cached/present)
        run: go mod tidy

      - name: Build App
        run: CGO_ENABLED=0 go build -o app_binary ./src

  tests: 
    name: running the multipel tests 
    runs-on: ubuntu-latest 
    needs: build 
    steps: 
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install python dependencies (if needed for testing framework)
        run: go mod tidy

      - name: mutation tests 
        run: |
          echo "mutation tests happens here"
      - name: snapshot testing 
        run: |
          echo "snapshot testing happens here"
      - name: component tetsting happens here 
        run: |
          echo "component testing happens here"

  archive:
    name: Create Archive
    runs-on: ubuntu-latest
    needs: [tests,clone-tag-and-config]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Archive Name and Zip File
        id: zipstep
        run: |
          service_name="${{ needs.clone-tag-and-config.outputs.service_name }}"
          VERSION="${{ needs.clone-tag-and-config.outputs.version }}"
          BRANCH_NAME="${GITHUB_REF##*/}"
          ZIP_NAME="${service_name}-${BRANCH_NAME}-${VERSION}.zip"
          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_OUTPUT
          zip -r "$ZIP_NAME" src/

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.zipstep.outputs.ZIP_NAME }}
          path: ${{ steps.zipstep.outputs.ZIP_NAME }}
          retention-days: 7


  docker-build:
    name: docker build 
    runs-on: ubuntu-latest
    needs: [archive,clone-tag-and-config]
    outputs:
      image_tag: ${{ steps.build_tag.outputs.image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Docker Build
        id: build_tag # This ID is used to reference the outputs of this step
        run: |
          DOCKER_USERNAME=${{ needs.clone-tag-and-config.outputs.docker_username }}
          SERVICE_NAME=${{ needs.clone-tag-and-config.outputs.service_name }}
          VERSION=${{ needs.clone-tag-and-config.outputs.version }}
          BRANCH_NAME=${GITHUB_REF##*/}

          # Construct the image tag
          # For releases, you might want to omit BRANCH_NAME for cleaner tags (e.g., $DOCKER_USERNAME/$SERVICE_NAME:$VERSION)
          IMAGE_TAG="$DOCKER_USERNAME/${SERVICE_NAME}-${BRANCH_NAME}:$VERSION"

          # Make IMAGE_TAG available as an output of this step and for subsequent steps via 'env'
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "Building Docker image with tag: $IMAGE_TAG"
          docker build -t $IMAGE_TAG .

      - name: Set up Snyk CLI
        # Pin to a stable major version (e.g., v1) for automatic updates and bug fixes
        uses: snyk/actions/setup@806182742461562b67788a64410098c9d9b96adb
        env:
          SNYK_TOKEN: d9141a36-1bc7-49bb-b541-bc2a1c31b3bf

      - name: Authenticate Snyk
        run: snyk auth d9141a36-1bc7-49bb-b541-bc2a1c31b3bf

      - name: Snyk Container Scan
        env:
          IMAGE_TAG: ${{ steps.build_tag.outputs.image_tag }}
        run: |
          # Use the job-level IMAGE_TAG environment variable
          snyk container test ${{ env.IMAGE_TAG }} --json > snyk-image-report.json
        continue-on-error: true # Allow the workflow to proceed even if Snyk finds vulnerabilities

      - name: Run Trivy vulnerability scanner
        # Pin to a stable major version (e.g., v0)
        uses: aquasecurity/trivy-action@master
        env:
          IMAGE_TAG: ${{ steps.build_tag.outputs.image_tag }}
        with:
          image-ref: ${{ env.IMAGE_TAG }}
          format: 'template'
          template: '@/contrib/sarif.tpl' # Output in SARIF format
          output: 'trivy-results.sarif' # Name the output file appropriately
          severity: 'CRITICAL,HIGH'
        continue-on-error: true # Allow the workflow to proceed even if Trivy finds vulnerabilities

      - name: Install Dockle
        env:
          IMAGE_TAG: ${{ steps.build_tag.outputs.image_tag }}
        run: |
          # Fetch the latest stable version of Dockle
          VERSION=$(
            curl --silent "https://api.github.com/repos/goodwithtech/dockle/releases/latest" | \
            grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/'
          )
          curl -L -o dockle.rpm "https://github.com/goodwithtech/dockle/releases/download/v${VERSION}/dockle_${VERSION}_Linux-64bit.rpm"
          sudo rpm -ivh dockle.rpm
      
      - name: Run Dockle Scan
        env:
          IMAGE_TAG: ${{ steps.build_tag.outputs.image_tag }}
        run: dockle ${{ env.IMAGE_TAG }}

      - name: Run Anchore Grype scan action
        # Pin to a stable major version (e.g., v6)
        uses: anchore/scan-action@v6
        id: scan # This ID is crucial for accessing the SARIF output
        env:
          IMAGE_TAG: ${{ steps.build_tag.outputs.image_tag }}
        with:
          image: ${{ env.IMAGE_TAG }}
          fail-build: true # Fail the build if the severity cutoff is met
          severity-cutoff: critical # Only critical vulnerabilities will fail the build

      - name: Upload Scan Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: container-scan-reports
          path: |
            snyk-image-report.json
            trivy-results.sarif # Updated filename

      - name: Upload Anchore SARIF Report
        # This step is crucial for integrating with GitHub Code Scanning alerts
        uses: github/codeql-action/upload-sarif@v3
        if: success() || failure() # Upload even if previous steps failed to capture scan results
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }} # Ensure this path is correct for Grype's SARIF output

      # - name: Docker Login & Push
      #   env:
      #     IMAGE_TAG: ${{ steps.build_tag.outputs.image_tag }}
      #   run: |
      #     echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      #     docker push ${{ env.IMAGE_TAG }} # Use the job-level IMAGE_TAG environment variable
  
  deploy_to_k8: 
    runs-on: ubuntu-latest
    needs: [clone-tag-and-config,docker-build]
    strategy:
      matrix:
        service: ${{ fromJson(needs.clone-tag-and-config.outputs.services) }} # Example JSON: [{"name": "usersvc", "port": 8080, "expectedCode": 200}]
    env: 
      BRANCH_NAME: ${{ github.ref_name }}
      VERSION: ${{ needs.clone-tag-and-config.outputs.version }}
      image_tag: ${{ needs.docker-build.outputs.image_tag }}
      SERVICE_NAME: ${{ needs.clone-tag-and-config.outputs.service_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.14.0'

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: helm upgrade or install 
        run: |
          helm upgrade --install ${{ env.service_name }} . \
          -f values-${{ env.BRANCH_NAME }}.yaml \
          --set ${{ env.service_name }}.image=${{ env.image_tag }} \
          --namespace ${{ env.BRANCH_NAME }}

      - name: check service is running or not 
        env:
          SERVICE_NAME: ${{ matrix.service.name }}
          SERVICE_PORT: ${{ matrix.service.port }}
          EXPECTED_CODE: ${{ matrix.service.expectedCode || '200' }}
          PATH: ${{ matrix.service.path || '/' }}
          NAMESPACE: ${{ github.ref_name }}  # Dynamic branch-based namespace
        run: |
          echo "🔍 Checking service health for $SERVICE_NAME in namespace $NAMESPACE"

          echo "📦 Verifying rollout status..."
          kubectl rollout status deployment/$SERVICE_NAME -n $NAMESPACE --timeout=120s

          echo "🔗 Verifying service endpoints..."
          if ! kubectl get endpoints $SERVICE_NAME -n $NAMESPACE -o jsonpath='{.subsets}' | grep -q 'addresses'; then
              echo "❌ No ready endpoints found for service $SERVICE_NAME"
              exit 1
          else
              echo "✅ Endpoints are healthy."
          fi

          echo "🚪 Port-forwarding service $SERVICE_NAME..."
          kubectl port-forward svc/$SERVICE_NAME $SERVICE_PORT:$SERVICE_PORT -n $NAMESPACE &
          PORT_FORWARD_PID=$!
          sleep 5  # Let the port-forward stabilize

          echo "🌐 Sending test request to http://localhost:$SERVICE_PORT$PATH"
          responseCode=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:${SERVICE_PORT}${PATH})
          echo "🔁 Response code: $responseCode"

          if [ "$responseCode" != "$EXPECTED_CODE" ]; then
              echo "❌ Expected $EXPECTED_CODE but got $responseCode"
              kill $PORT_FORWARD_PID || true
              exit 1
          else
              echo "✅ Service $SERVICE_NAME returned expected HTTP $EXPECTED_CODE"
          fi

          echo "🛑 Cleaning up port-forward"
          kill $PORT_FORWARD_PID || true
      


          
      


